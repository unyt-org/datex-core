42;
44.0;
0x42;
0b01010101;
`0123456789abcdef`;

"string";
'also a string (true) (1 + 2)';

true;
null;
void;

ref a;
const b;
val c;

@@0123456789abcde;
@jonas;
@+unyt;



// normal var updates and assignments

var x = 10; // $x = 10
x += 5; // $x = 15
x; // $x

var y = {a: 1}; // #y = $y = {a: 1}
y.a = 2; // $y = {a: 2}
y = {a: 4, b: 5}; // $y = {a: 4, b: 5}
var z = y; // #z -> $y
z == y; // true
z === y; // true
z is y; // true
y = {a: 6}; // #y = $y2 = {a: 6} // reassigning slot y to $y2
z // #z -> $y = {a: 4, b: 5} - still pointing to $y
z is y; // false, #z still points to $y, but #y now points to $y2

// variable bindings
var a = {name: 'jonas'}; // #a = $a = {name: 'jonas'}
var b = a; // #b -> $a;
b is a; // true
var c = always a; // requires var binding - changing #a = $aref -> $a (at compile time),  #c -> $aref
b is a; // still true, $aref gets collapsed to $a
c is a; // true
a = {name: 'benni'}; // reassigning #a = $a2 = {name: 'benni'}
b is a; // false, #b still points to $a, but #a now points to $a2
c is a; // true, #c still points to $aref, which is now $a2

// variable bindings for external scopes
var a = {name: 'jonas'}; // #a = $a = {name: 'jonas'}
function example() {
    print a; // example requires binding to a, changing #a = $aref -> $a (at compile time)
}
a = {name: 'benni'}; // reassigning #a = $a2 = {name: 'benni'}
example(); // prints {name: 'benni'}, #a still points to $aref, which is now $a2