use crate::{global::binary_codes::InstructionCode, utils::color::Color};

pub fn get_code_token(code: &InstructionCode, _formatted: bool) -> String {
    match code {
        InstructionCode::EXIT => "exit".to_string(),
        InstructionCode::CLOSE_AND_STORE => ";".to_string(),

        InstructionCode::ARRAY_START => "[".to_string(),
        InstructionCode::ARRAY_END => "]".to_string(),
        InstructionCode::OBJECT_START => "{".to_string(),
        InstructionCode::OBJECT_END => "}".to_string(),
        InstructionCode::TUPLE_START => "(".to_string(),
        InstructionCode::TUPLE_END => ")".to_string(),
        InstructionCode::SCOPE_START => "(".to_string(),
        InstructionCode::SCOPE_END => ")".to_string(),

        InstructionCode::ADD => "+".to_string(),
        InstructionCode::SUBTRACT => "-".to_string(),
        InstructionCode::MULTIPLY => "*".to_string(),
        InstructionCode::DIVIDE => "/".to_string(),
        InstructionCode::POWER => "^".to_string(),
        InstructionCode::MODULO => "%".to_string(),

        InstructionCode::AND => "and".to_string(),
        InstructionCode::OR => "or".to_string(),
        InstructionCode::NOT => "not".to_string(),

        InstructionCode::INCREMENT => "++".to_string(),
        InstructionCode::DECREMENT => "--".to_string(),

        InstructionCode::RUN => "run".to_string(),
        InstructionCode::DO => "do".to_string(),
        InstructionCode::DEFER => "defer".to_string(),
        InstructionCode::FUNCTION => "function".to_string(),
        InstructionCode::AWAIT => "await".to_string(),
        InstructionCode::COPY => "copy".to_string(),
        InstructionCode::CLONE => "clone".to_string(),
        InstructionCode::CREATE_POINTER => "$$".to_string(),
        InstructionCode::KEYS => "keys".to_string(),
        InstructionCode::GET_TYPE => "type".to_string(),
        InstructionCode::GET => "get".to_string(),
        InstructionCode::YEET => "yeet".to_string(),
        InstructionCode::PLAIN_SCOPE => "scope".to_string(),
        InstructionCode::ASSERT => "assert".to_string(),
        InstructionCode::MATCHES => "matches".to_string(),
        InstructionCode::TRANSFORM => "always".to_string(),
        InstructionCode::RETURN => "return".to_string(),
        InstructionCode::COUNT => "count".to_string(),
        InstructionCode::ITERATOR => "iterator".to_string(),
        InstructionCode::DEBUGGER => "debugger".to_string(),
        InstructionCode::EXTENDS => "extends".to_string(),
        InstructionCode::IMPLEMENTS => "implements".to_string(),
        InstructionCode::NEXT => "next".to_string(),
        InstructionCode::DEFAULT => "default".to_string(),

        InstructionCode::REMOTE => "::".to_string(),

        InstructionCode::GREATER => ">".to_string(),
        InstructionCode::LESS => "<".to_string(),
        InstructionCode::GREATER_EQUAL => ">=".to_string(),
        InstructionCode::LESS_EQUAL => "<=".to_string(),
        InstructionCode::NOT_EQUAL => "!==".to_string(),
        InstructionCode::NOT_EQUAL_VALUE => "!=".to_string(),
        InstructionCode::EQUAL => "===".to_string(),
        InstructionCode::EQUAL_VALUE => "==".to_string(),

        InstructionCode::SYNC => "<==".to_string(),
        InstructionCode::STOP_SYNC => "</=".to_string(),
        InstructionCode::_SYNC_SILENT => "<==:".to_string(),

        InstructionCode::STREAM => "<<".to_string(),
        InstructionCode::STOP_STREAM => "</".to_string(),

        InstructionCode::CHILD_GET => ".".to_string(),
        InstructionCode::CHILD_GET_REF => "->".to_string(),
        InstructionCode::CHILD_ACTION => ".".to_string(),
        InstructionCode::CHILD_SET => ".".to_string(),
        InstructionCode::CHILD_SET_REFERENCE => ".".to_string(),
        InstructionCode::WILDCARD => "*".to_string(),

        _ => format!("⎣{:X}⎤", *code as u8).to_string(),
    }
}

pub fn get_code_color(code: &InstructionCode) -> Color {
    match code {
        InstructionCode::TEXT => Color::TEXT,
        InstructionCode::SHORT_TEXT => Color::TEXT,

        InstructionCode::BUFFER => Color::BUFFER,

        InstructionCode::INT_8 => Color::NUMBER,
        InstructionCode::INT_16 => Color::NUMBER,
        InstructionCode::INT_32 => Color::NUMBER,
        InstructionCode::INT_64 => Color::NUMBER,
        InstructionCode::FLOAT_64 => Color::NUMBER,
        InstructionCode::FLOAT_AS_INT_32 => Color::NUMBER,
        InstructionCode::FLOAT_AS_INT_8 => Color::NUMBER,
        InstructionCode::BIG_INT => Color::NUMBER,
        InstructionCode::QUANTITY => Color::_UNKNOWN,
        InstructionCode::TIME => Color::TIME,
        InstructionCode::URL => Color::DEFAULT,

        InstructionCode::TRUE => Color::PrimitiveConstant,
        InstructionCode::FALSE => Color::PrimitiveConstant,
        InstructionCode::NULL => Color::PrimitiveConstant,
        InstructionCode::VOID => Color::PrimitiveConstant,

        InstructionCode::TYPE => Color::TYPE,
        InstructionCode::EXTENDED_TYPE => Color::TYPE,

        InstructionCode::PERSON_ALIAS => Color::_UNKNOWN,
        InstructionCode::PERSON_ALIAS_WILDCARD => Color::_UNKNOWN,
        InstructionCode::INSTITUTION_ALIAS => Color::_UNKNOWN,
        InstructionCode::INSTITUTION_ALIAS_WILDCARD => Color::_UNKNOWN,
        InstructionCode::ENDPOINT => Color::_UNKNOWN,
        InstructionCode::ENDPOINT_WILDCARD => Color::_UNKNOWN,

        InstructionCode::RETURN => Color::RESERVED,
        InstructionCode::TEMPLATE => Color::RESERVED,
        InstructionCode::YEET => Color::RESERVED,
        InstructionCode::EXTENDS => Color::RESERVED,
        InstructionCode::IMPLEMENTS => Color::RESERVED,
        InstructionCode::MATCHES => Color::RESERVED,
        InstructionCode::DEBUGGER => Color::RESERVED,
        InstructionCode::JMP => Color::RESERVED,
        InstructionCode::JTR => Color::RESERVED,
        InstructionCode::JFA => Color::RESERVED,
        InstructionCode::COUNT => Color::RESERVED,
        InstructionCode::ABOUT => Color::RESERVED,
        InstructionCode::NEW => Color::RESERVED,
        InstructionCode::DELETE_POINTER => Color::RESERVED,
        InstructionCode::COPY => Color::RESERVED,
        InstructionCode::CLONE => Color::RESERVED,
        InstructionCode::ORIGIN => Color::RESERVED,
        InstructionCode::SUBSCRIBERS => Color::RESERVED,
        InstructionCode::PLAIN_SCOPE => Color::RESERVED,
        InstructionCode::TRANSFORM => Color::RESERVED,
        InstructionCode::OBSERVE => Color::RESERVED,
        InstructionCode::RUN => Color::RESERVED,
        InstructionCode::AWAIT => Color::RESERVED,
        InstructionCode::DEFER => Color::RESERVED,
        InstructionCode::FUNCTION => Color::RESERVED,
        InstructionCode::ASSERT => Color::RESERVED,
        InstructionCode::ITERATOR => Color::RESERVED,
        InstructionCode::NEXT => Color::RESERVED,
        InstructionCode::FREEZE => Color::RESERVED,
        InstructionCode::SEAL => Color::RESERVED,
        InstructionCode::HAS => Color::RESERVED,
        InstructionCode::KEYS => Color::RESERVED,
        InstructionCode::GET_TYPE => Color::RESERVED,
        InstructionCode::GET => Color::RESERVED,
        InstructionCode::DO => Color::RESERVED,
        InstructionCode::DEFAULT => Color::RESERVED,
        InstructionCode::COLLAPSE => Color::RESERVED,
        InstructionCode::CREATE_POINTER => Color::RESERVED,
        InstructionCode::POINTER => Color::RESERVED,

        InstructionCode::WILDCARD => Color::PrimitiveConstant,

        InstructionCode::ELEMENT_WITH_KEY => Color::DefaultLight,
        InstructionCode::ELEMENT_WITH_INT_KEY => Color::DefaultLight,

        _ => Color::DEFAULT,
    }
}
